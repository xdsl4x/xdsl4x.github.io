<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Ghost's Blog]]></title><description><![CDATA[The xDSL common DSL ecosystem project]]></description><link>https://www.xdsl.dev</link><generator>GatsbyJS</generator><lastBuildDate>Tue, 16 Nov 2021 16:48:47 GMT</lastBuildDate><item><title><![CDATA[About xDSL]]></title><description><![CDATA[The challenge Computer simulation is often refered to as the third methodology, complementing theory and experimentation for scientific and…]]></description><link>https://www.xdsl.dev/about/</link><guid isPermaLink="false">https://www.xdsl.dev/about/</guid><pubDate>Tue, 12 Dec 1922 10:00:00 GMT</pubDate><content:encoded>&lt;h1&gt;The challenge&lt;/h1&gt;
&lt;p&gt;Computer simulation is often refered to as the &lt;em&gt;third methodology&lt;/em&gt;, complementing theory and experimentation for scientific and engineering research. More efficient aircraft designs, potental vaccines against disseases, increased understanding of the cosmos, more accurate weather modelling, and greater understanding of the fundamental forces underlying matter are just a few of the very many impacts that simulation has delivered, in-fact the vast majority of scientific and engineering developments of the past 20 years have, to some extent, involved simulation.&lt;/p&gt;
&lt;img src=&quot;/img/application_front_page.png&quot; width=&quot;200&quot; align=&quot;right&quot;&gt;
&lt;p&gt;Given the importance of computer simulation it is no wonder that users are constantly demanding the ability to undertake more detailed runs at reduced time to solution. This raises a significant technological challenge, where both hardware and software struggle to keep up with such ambitions. Whilst there have been very significant improvements at the hardware level arguably many challenges have also been pushed over to the software side. A prime example of this was the leveling off of clock frequency increases, where the industry responded by significantly increasing the amount of parallelism to compensate and contine the growth in performance. We are now in a situation even with current generation supercomputers were the programming challenge to fully exploit an HPC machine is significant, with programmers needing to consider multiple levels of parallelism (inter-node, intra-node but inter-socket, inter-socket, instruction level) and the interoperability of heterogeneous architectures such as CPUs and GPUs.&lt;/p&gt;
&lt;h2&gt;Exascale computing on the horizon&lt;/h2&gt;
&lt;p&gt;There is a great push in the community to develop exascale supercomputers, which are capable of performing over a Quintillion floating point calculations per second. Hardware has developed significantly towards this goal but in a way that presents more complexity to the end-user, for instance via high degrees of hardware heterogeneity, extremely large amounts of parallelism, deeper memory hierarchies, and novel hardware architectures. Whilst these facets can achieve such exascale raw performance, they make the programming of such machines far more complex using current approaches to writing HPC codes. This means that there is a danger that, in the coming decade, we will have extremely powerful supercomputing hardware but on a small number of applications that can fully exploit this who are able to invest the time of the few highly skilled experts in programming them.&lt;/p&gt;
&lt;h2&gt;Domain Specific Languages (DSLs) to the rescue?&lt;/h2&gt;
&lt;p&gt;It might be surprising that, by far, the most popular language that HPC codes are written in is Fortran. Whilst more modern languages, such as C++ and Python are slowly gaining more traction, the choice of Fortran due to its convenient language features for writing scientific codes and mature compiler support certainly made a lot of sense traditionally. However Fortran is a general purpose language where the programmer must specify the &lt;em&gt;how&lt;/em&gt; as well as the &lt;em&gt;what&lt;/em&gt; of their parallel computation. By raising the abstraction level to suit the specific application domain in question, then programmers can not only much more conveniently encode their applications but also the compiler has a rich amount of information about which it can use to make tricky, low level choices around how best to run the code in parallel.&lt;/p&gt;
&lt;p&gt;Domain Specific Languages (DSLs) have grown in popularity in recent years and enable exactly this, raising the abstraction level to suiting the specific application domain in question. It has been found that these result in significant increases in programmer productivity, performance, and portability across architectures. Put simply, it is the strong belief of many in the HPC community that DSLs will enable domain, rather then HPC, experts to program and effectively exploit future exascale machines. However, the big &lt;strong&gt;challenge is that DSLs are typically implemented in isolation fashion with their software stacks siloed and sharing little code or infrastructure between them&lt;/strong&gt;. This means that whilst a specific DSL might suit an application area, it’s maturity, long term support, ability to efficiently exploit current and future technology might be highly questionable. Furthermore, the development of DSLs and underlying compilation support can be time consuming, with many failing to reach wide spread adoption.&lt;/p&gt;
&lt;h1&gt;Our solution - an ecosystem for DSL development&lt;/h1&gt;
&lt;p&gt;To address the challenge of isolate DSL software stacks which can suffer from long development times, immature software stacks, uncertain long term futures, and risky buy in from users we are developing a common ecosystem. This is illustrated below, where the &lt;em&gt;special sauce&lt;/em&gt; enabling such a common infrastructure is Multi Level Intermediate Representation (MLIR). MLIR is a technology that has developed over the past couple of years that provides significant flexibility when representing programming languages, with the ability to fairly easily develop new MLIR dialects and build atop existing ones. Many MLIR dialects already exist and furthermore new dialects can be easily developed to support the expressiveness required by a wide range of DSLs for running on large-scale HPC machines.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/overview.png&quot; alt=&quot;Overview Image&quot;&gt;&lt;/p&gt;
&lt;p&gt;There are many advantages to this approach, firstly the ability to benefit from a wealth of existing MLIR/LLVM tooling that already exists and successfully targets the wide range of hardware commonly found in HPC machines. This means that there is then significant reuse of infrastructure between DSLs, with improvements to specific parts of the ecosystem then often benefitting other DSLs. Furthermore it enables longevity of the DSL, as whilst the actual DSL abstraction itself might not be further developed, the underlying MLIR/LLVM compilation tools are very actively developed and maintained by a large and vibrant community. As such users can have reasonable confidence that their code will be able to run efficiently on a large number of future architectures.&lt;/p&gt;
&lt;p&gt;Such a unified ecosystem also benefits the DSL designer as they only need to implement a front-end for their language, generating the appropriate MLIR which can then benefit from the rest of the compilation stack. Many DSLs are currently encoded within Python, and as such in this project to aid the integration of such abstractions into MLIR we are developing a Python toolbox which will lower the barrier even further for DSL development. Moreover, we believe this also promotes integration between DSLs, where building upon MLIR will enable more easily sharing of features and as such open up specific DSLs to new communities.&lt;/p&gt;
&lt;p&gt;Performance portability is a key aim of this project, and we are targetting a variety of hardware including Intel, AMD, and ARM CPUs, Nvidia and AMD GPUs, Xilinx and Intel FPGAs, and the Cerebras CS-1. The hypothesis is that through existing LLVM support for these architectures and the rich dialects of MLIR then the user’s application code written in their DSL of choice can remain largely unchanged between architectures, with the underlying compilation stack being able to efficiently target the technology.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[BoF at SC21]]></title><description><![CDATA[BoF at SC21 Tuesday 16th November 2021 12:15pm - 1:15pm CST Domain Specific Languages (DSLs) are a powerful way of providing programmer…]]></description><link>https://www.xdsl.dev/bof/</link><guid isPermaLink="false">https://www.xdsl.dev/bof/</guid><pubDate>Tue, 12 Dec 1922 10:00:00 GMT</pubDate><content:encoded>&lt;h1&gt;BoF at SC21&lt;/h1&gt;
&lt;p&gt;Tuesday 16th November 2021 12:15pm - 1:15pm CST&lt;/p&gt;
&lt;p&gt;Domain Specific Languages (DSLs) are a powerful way of providing programmer productivity and performance when developing HPC codes. The enriched information enables effective exploitation of supercomputers, which is especially important as we reach exascale due to the high degrees of parallelism and complex heterogeneous architectures. DSLs, however, are often developed in isolation, sharing little underlying infrastructure, which can mean they are somewhat immature, suffering from bugs, a potential lack of maintenance and lack of third party tooling.&lt;/p&gt;
&lt;p&gt;In this BoF we will focus on how we, as a community, can consolidate our efforts and look to develop a common DSL ecosystem. Such an activity could be game-changing in providing application developers with mature, feature rich, abstract programming environments enabling effective exploitation of future HPC machines. However, the devil is in the detail and there are many challenges that must be solved to develop and provide such a solution. These include requirements driven by the application developers, the perspectives of the DSL designers and what support they need, and to the compilation stack and which are the most appropriate technologies.&lt;/p&gt;
&lt;p&gt;It is the intention of this BoF to provide an interactive session where we as the community can meet to discuss these aspects, highlight existing activities already underway that could compliment efforts here, and take the first step in developing a common unified ecosystem for DSL development&lt;/p&gt;
&lt;h2&gt;Register interest for further involvement&lt;/h2&gt;
&lt;p&gt;Please register your interest for further involvement in future discussions and events around this topic &lt;a href=&quot;https://forms.gle/QTuwhFQnM2ERtdcc9&quot;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;View the schedule&lt;/h2&gt;
&lt;p&gt;The SC schedule can be viewed &lt;a href=&quot;https://sc21.supercomputing.org/presentation/?id=bof147&amp;#x26;sess=sess390&quot;&gt;here&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Paul Kelly gives Keynote at IWOMP about DSLs]]></title><description><![CDATA[IWOMP is a popular annual conference focussed on parallel programming using OpenMP. It’s success has grown from the fact that there are…]]></description><link>https://www.xdsl.dev/iwomp_keynote/</link><guid isPermaLink="false">https://www.xdsl.dev/iwomp_keynote/</guid><pubDate>Tue, 12 Dec 1922 10:00:00 GMT</pubDate><content:encoded>&lt;p&gt;IWOMP is a popular annual conference focussed on parallel programming using OpenMP. It’s success has grown from the fact that there are always numerous interesting and innovative ideas being discussed. A major cornerstone of any conference is the keynote talk which this year was delivered by Paul Kelly, who is also co-I on XDSL. Paul was talking about how we might go about achieving the elusive goals of programmer productivity, performance and portability across architectures, with DSLs having an important role to play here. However the languages themselves are not enough and Paul’s message was that the key to success here, and wide spread adoption of DSLs, is the underlying compiler architecture. Commonly DSL implementations (the compilers) are standalone, sharing little common infrastructure and ultimately relying on the support of a small developer base. With limited, if any, shared components this makes the job of the DSL developer far more difficult. Building on MLIR, as we aim to do in this project, is one way in which this situation can be improved, and Paul describes how this can establish community support for code generation tools which then can underpin multiple front-end DSLS.s Ultimately this approach results in a more mature ecosystem and reduced barrier to entry for DSL developers.&lt;/p&gt;
&lt;p&gt;&lt;div class=&quot;gatsby-resp-iframe-wrapper&quot; style=&quot;padding-bottom: 50%; position: relative; height: 0; overflow: hidden; margin-bottom: 1rem&quot; &gt; &lt;div class=&quot;embedVideo-container&quot;&gt; &lt;iframe title=&quot;&quot; src=&quot;https://www.youtube-nocookie.com/embed/b0SYsG0-od4?rel=0&quot; class=&quot;embedVideo-iframe&quot; style=&quot;border:0; position: absolute; top: 0; left: 0; width: 100%; height: 100%; &quot; loading=&quot;lazy&quot; allowfullscreen=&quot;&quot; sandbox=&quot;allow-same-origin allow-scripts allow-popups&quot;&gt;&lt;/iframe&gt; &lt;/div&gt; &lt;/div&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Project partners]]></title><description><![CDATA[School of Informatics (University of Edinburgh) The School of Informatics leads this project, with Dr Tobias Grosser (the project PI) and Dr…]]></description><link>https://www.xdsl.dev/partners/</link><guid isPermaLink="false">https://www.xdsl.dev/partners/</guid><pubDate>Tue, 12 Dec 1922 10:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;School of Informatics (University of Edinburgh)&lt;/h2&gt;
&lt;img src=&quot;/img/uoe_informatics.jpg&quot; width=&quot;200&quot; align=right&gt;
&lt;p&gt;The School of Informatics leads this project, with Dr Tobias Grosser (the project PI) and Dr Michel Steuwer who are compiler, MLIR and LLVM experts. Being active collaborators to the MLIR and LLVM communities, they bring expertise around the development of appropriate MLIR dialects, the mechanism to connect Python based DSLs with MLIR, and integration with LLVM. Furthermore, their wide connections throughout the compiler communities means that the project is able to engage closely with that community and act as a bridge between people working in HPC and compilers.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Department of Computing (Imperial College London)&lt;/h2&gt;
&lt;img src=&quot;https://i.imgur.com/c9wYpr9.jpeg&quot; width=400 align=right&gt;
&lt;p&gt;Professor Paul Kelly and Dr Gerard Gorman provide DSL expertise to the project. Leading the development of numerous DSLs, including the popular and widely successeful Devito, their knowledge and experience is invaluable to ensure that the ecosystem being developed is wide ranging across DSLs. Furthermore, Devito is an explicit target of this project, using the Python-based MLIR integration toolbox that we will develop to integrate this DSL with our ecosystem. Additionally Paul and Gerard bring significant experience of working with seismic community, cloud computing, and interactive HPC technologies such as Jupyter notebooks, all of which are important considerations in this project to ensure that the DSL eco-system we will develop can interoperate with.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;EPCC (University of Edinburgh)&lt;/h2&gt;
&lt;img src=&quot;/img/epcc-logo-cropped.png&quot; width=400 align=left&gt;
&lt;p&gt;EPCC is the UK’s leading supercomputing centre, with Dr Nick Brown and Dr Amrey Krause providing HPC expertise at both the technology and application level. This includes expertise with a number of the project’s target applications that we will be using as vehicles to evaluate the developed eco-system. During the project we will be using many of EPCC’s hosted HPC systems which range from large-scale production machines such as the ARCHER2 UK national supercomputer, to more experimental systems such as the Cerebras CS-1 which contains a highly innovative massive-core CPU.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Project starts]]></title><description><![CDATA[August saw the start of this project, with an initial kickoff virtual meeting to plan for the next three years and set short term project…]]></description><link>https://www.xdsl.dev/started/</link><guid isPermaLink="false">https://www.xdsl.dev/started/</guid><pubDate>Tue, 12 Dec 1922 10:00:00 GMT</pubDate><content:encoded>&lt;p&gt;August saw the start of this project, with an initial kickoff virtual meeting to plan for the next three years and set short term project goals. We are very excited to be working on this specific topic, with Tobias and Michel already having worked extensively with MLIR and have existing project work that will form a basis for our starting point when looking to connect MLIR with Python. We were also busy in August planning our initial knowledge exchange activities, and have a number of planned events which we will advertise in the coming months.&lt;/p&gt;
&lt;p&gt;We strongly believe that the development of a common DSL eco-system could be transformative for the HPC community and will benefit different sub-communities in different ways. The most obvious beneficiaries will be the application developers who will be able to select the most appropriate programming abstractions to suit their scientific domain, safe in the knowledge that there is a mature and well supported underlying toolchain. We also believe that DSL developers will benefit greatly from the advances that we expect to make in this project, as they will not have to reinvent the wheel when looking to develop a new domain specific abstraction. Currently such tools tend to be heavily siloed, sharing little common code and representiving a significant investment on behalf of the developer to get a working and reliable system. We believe that our eco-system will free DSL developers to concentrate on their abstractions and could signfiicantly increase the number of DSLs available.&lt;/p&gt;
&lt;p&gt;It’s certainly exciting for there to be so much potential, and we will be posting regular updates and organising numerous events during the project lifetime.&lt;/p&gt;</content:encoded></item></channel></rss>