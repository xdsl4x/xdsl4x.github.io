{"version":3,"sources":["webpack://gatsby-casper/./src/components/Pagination.tsx","webpack://gatsby-casper/./src/templates/index.tsx"],"names":["navCss","css","darken","colors","currentPage","numPages","isFirst","isLast","prevPage","toString","nextPage","to","rel","String","fromCharCode","Array","from","length","_","i","key","className","HomePosts","props","width","getImage","data","header","height","Helmet","lang","config","name","content","property","getSrc","Wrapper","outer","SiteHeader","SiteHeaderStyles","style","backgroundImage","inner","SiteNav","isHome","id","SiteMain","inner_frontpage","Posts","PostFeed","allMarkdownRemark","edges","map","post","index","node","frontmatter","draft","PostCard","fields","slug","large","children","pageContext","Footer"],"mappings":"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","file":"component---src-templates-index-tsx-10e558002f398e4cef3e.js","sourcesContent":["import { Link } from 'gatsby';\nimport React from 'react';\nimport { darken } from 'polished';\nimport { css } from '@emotion/react';\n\nimport { colors } from '../styles/colors';\n\nexport interface PaginationProps {\n  currentPage: number;\n  numPages: number;\n}\n\nconst Pagination: React.FunctionComponent<PaginationProps> = ({ currentPage, numPages }) => {\n  const isFirst = currentPage === 1;\n  const isLast = currentPage === numPages;\n  const prevPage = currentPage - 1 === 1 ? '/' : (currentPage - 1).toString();\n  const nextPage = (currentPage + 1).toString();\n\n  return (\n    <nav css={navCss}>\n      <div>\n        {!isFirst && (\n          <Link to={prevPage} rel=\"prev\">\n            {/* << symbol */}\n            {String.fromCharCode(171)}\n          </Link>\n        )}\n\n        {Array.from({ length: numPages }, (_, i) => (\n          <Link key={`pagination-number${i + 1}`} className={i + 1 === currentPage ? 'active' : ''} to={`/${i === 0 ? '' : i + 1}`}>\n            {i + 1}\n          </Link>\n        ))}\n\n        {!isLast && (\n          <Link to={nextPage} rel=\"next\">\n            {/* >> symbol */}\n            {String.fromCharCode(187)}\n          </Link>\n        )}\n      </div>\n    </nav>\n  );\n};\n\nconst navCss = css`\n  text-align: center;\n  div {\n    display: inline-block;\n  }\n\n  a {\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell;\n    background: #fff;\n    color: black;\n    float: left;\n    padding: 8px 16px;\n    text-decoration: none;\n    transition: background-color .3s;\n    border: 1px solid #ddd;\n    margin: 0 4px;\n    box-shadow: rgba(39, 44, 49, 0.06) 8px 14px 38px, rgba(39, 44, 49, 0.03) 1px 3px 8px;\n    border-radius: 6px;\n    margin-bottom: 5px;\n    min-width: 50px;\n\n    &.active {\n      -webkit-box-shadow:inset 3px 0px 0px 0px ${darken(0.05, colors.darkgrey)};\n      -moz-box-shadow:inset 3px 0px 0px 0px ${darken(0.05, colors.darkgrey)};\n      box-shadow:inset 3px 0px 0px 0px ${darken(0.05, colors.darkgrey)};\n    }\n\n    &:hover:not(.active) {\n      background-color: #ddd;\n    }\n\n    &:hover {\n      text-decoration: none;\n    }\n  }\n`;\n\nexport default Pagination;\n","import { graphql } from 'gatsby';\nimport { GatsbyImage, getSrc, getImage } from \"gatsby-plugin-image\";\nimport React from 'react';\nimport { Helmet } from 'react-helmet';\n\nimport { css } from '@emotion/react';\n\nimport { Footer } from '../components/Footer';\nimport SiteNav from '../components/header/SiteNav';\nimport Pagination from '../components/Pagination';\nimport { PostCard } from '../components/PostCard';\nimport { Wrapper } from '../components/Wrapper';\nimport IndexLayout from '../layouts';\nimport {\n  inner,\n  inner_frontpage,\n  outer,\n  PostFeed,\n  Posts,\n  SiteDescription,\n  SiteHeader,\n  SiteHeaderContent,\n  SiteMain,\n  SiteTitle,\n  SiteHeaderStyles,\n} from '../styles/shared';\nimport config from '../website-config';\nimport { PageContext } from './post';\n\nexport interface IndexProps {\n  pageContext: {\n    currentPage: number;\n    numPages: number;\n  };\n  data: {\n    logo: {\n      childImageSharp: {\n        fixed: GatsbyImage;\n      };\n    };\n    header: {\n      childImageSharp: {\n        fixed: GatsbyImage;\n      };\n    };\n    allMarkdownRemark: {\n      edges: Array<{\n        node: PageContext;\n      }>;\n    };\n  };\n}\n\nconst IndexPage: React.FC<IndexProps> = props => {\n  const width = getImage(props.data.header).width;\n  const height = getImage(props.data.header).height;\n\n  return (\n    <IndexLayout css={HomePosts}>\n      <Helmet>\n        <html lang={config.lang} />\n        <title>{config.title}</title>\n        <meta name=\"description\" content={config.description} />\n        <meta property=\"og:site_name\" content={config.title} />\n        <meta property=\"og:type\" content=\"website\" />\n        <meta property=\"og:title\" content={config.title} />\n        <meta property=\"og:description\" content={config.description} />\n        <meta property=\"og:url\" content={config.siteUrl} />\n        <meta\n          property=\"og:image\"\n          content={`${config.siteUrl}${getSrc(props.data.header)}`}\n        />\n        {config.facebook && <meta property=\"article:publisher\" content={config.facebook} />}\n        {config.googleSiteVerification && (\n          <meta name=\"google-site-verification\" content={config.googleSiteVerification} />\n        )}\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n        <meta name=\"twitter:title\" content={config.title} />\n        <meta name=\"twitter:description\" content={config.description} />\n        <meta name=\"twitter:url\" content={config.siteUrl} />\n        <meta\n          name=\"twitter:image\"\n          content={`${config.siteUrl}${getSrc(props.data.header)}`}\n        />\n        {config.twitter && (\n          <meta\n            name=\"twitter:site\"\n            content={`@${config.twitter.split('https://twitter.com/')[1]}`}\n          />\n        )}\n        <meta property=\"og:image:width\" content={width.toString()} />\n        <meta property=\"og:image:height\" content={height.toString()} />\n      </Helmet>\n      <Wrapper>\n        <div\n          css={[outer, SiteHeader, SiteHeaderStyles]}\n          className=\"site-header-background\"\n          style={{\n            backgroundImage: `url('${getSrc(props.data.header)}')`,\n          }}\n        >\n          <div css={inner}>\n            <SiteNav isHome />\n            <SiteHeaderContent className=\"site-header-content\">\n              <SiteTitle className=\"site-title\">                \n                {config.title}\n              </SiteTitle>\n              <SiteDescription>{config.description}</SiteDescription>\n            </SiteHeaderContent>\n          </div>\n        </div>\n        <main id=\"site-main\" css={[SiteMain, outer]}>\n          <div css={[inner_frontpage, Posts]}>\n            <div css={[PostFeed]}>\n              {props.data.allMarkdownRemark.edges.map((post, index) => {\n                // filter out drafts in production\n                return (\n                  (post.node.frontmatter.draft !== true ||\n                    process.env.NODE_ENV !== 'production') && (\n                    <PostCard key={post.node.fields.slug} post={post.node} large={index === 0} />\n                  )\n                );\n              })}\n            </div>\n          </div>\n        </main>\n        {props.children}\n        {props.pageContext.numPages > 1 && (\n          <Pagination\n            currentPage={props.pageContext.currentPage}\n            numPages={props.pageContext.numPages}\n          />\n        )}\n        <Footer />\n      </Wrapper>\n    </IndexLayout>\n  );\n};\n\nexport const pageQuery = graphql`query blogPageQuery($skip: Int!, $limit: Int!) {\n  logo: file(relativePath: {eq: \"img/ghost-logo.png\"}) {\n    childImageSharp {\n      gatsbyImageData(layout: FIXED)\n    }\n  }\n  header: file(relativePath: {eq: \"img/blog-cover.png\"}) {\n    childImageSharp {\n      gatsbyImageData(width: 2000, quality: 100, layout: FIXED)\n    }\n  }\n  allMarkdownRemark(\n    sort: {fields: [frontmatter___tags, frontmatter___date], order: [ASC, DESC]}\n    filter: {frontmatter: {tags: {in: [\"frontpage\", \"about\"]}, draft: {ne: true}}}\n    limit: $limit\n    skip: $skip\n  ) {\n    edges {\n      node {\n        frontmatter {\n          title\n          date\n          tags\n          draft\n          excerpt\n          image {\n            childImageSharp {\n              gatsbyImageData(layout: FULL_WIDTH)\n            }\n          }\n          author {\n            id\n            bio\n            avatar {\n              childImageSharp {\n                gatsbyImageData(layout: FULL_WIDTH, breakpoints: [40, 80, 120])\n              }\n            }\n          }\n        }\n        excerpt\n        fields {\n          readingTime {\n            text\n          }\n          layout\n          slug\n        }\n      }\n    }\n  }\n}\n`;\n\nconst HomePosts = css`\n  @media (min-width: 795px) {\n    .post-card-large {\n      flex: 1 1 100%;\n      flex-direction: row;\n      padding-bottom: 40px;\n      min-height: 280px;\n      border-top: 0;\n    }\n\n    .post-card-large .post-card-title {\n      margin-top: 0;\n      font-size: 3.2rem;\n    }\n\n    .post-card-large:not(.no-image) .post-card-header {\n      margin-top: 0;\n    }\n\n    .post-card-large .post-card-image-link {\n      position: relative;\n      flex: 1 1 auto;\n      margin-bottom: 0;\n      min-height: 380px;\n    }\n\n    .post-card-large .post-card-image {\n      position: absolute;\n      width: 100%;\n      height: 100%;\n    }\n\n    .post-card-large .post-card-content {\n      flex: 0 1 361px;\n      justify-content: center;\n    }\n\n    .post-card-large .post-card-title {\n      margin-top: 0;\n      font-size: 3.2rem;\n    }\n\n    .post-card-large .post-card-content-link {\n      padding: 0 0 0 40px;\n    }\n\n    .post-card-large .post-card-meta {\n      padding: 0 0 0 40px;\n    }\n\n    .post-card-large .post-card-excerpt p {\n      margin-bottom: 1.5em;\n      font-size: 1.8rem;\n      line-height: 1.5em;\n    }\n  }\n`;\n\nexport default IndexPage;\n"],"sourceRoot":""}